function quiver(this,long,lat,u,v,varargin)
%KML.QUIVER(long,lat,u,v) Create a quiver plot, similar to built-in
%   function quiver3, using line arrows. 
%  
%   Copyright 2012 Rafael Fernandes de Oliveira (rafael@rafael.aero)
%   $Revision: 1.4 $  $Date: 2012/02/08 16:00:00 $


    [longDEG,latDEG] = this.checkUnit(long,lat);
    
    p = inputParser;
    
    nlat = numel(lat);

    p.addRequired('lat',  @(a)isnumeric(a) && ~isempty(a));
    p.addRequired('long', @(a)isnumeric(a) && ~isempty(a) && numel(a)==nlat);
    p.addRequired('u',    @(a)isnumeric(a) && ~isempty(a) && numel(a)==nlat);
    p.addRequired('v',    @(a)isnumeric(a) && ~isempty(a) && numel(a)==nlat);

    p.addParamValue('scale',1e5,@(a)isnumeric(a) && numel(a)==1);
    p.addParamValue('arrowBaseSize',0.3,@(a)isnumeric(a) && numel(a)==1);
    p.addParamValue('plotArrows',true,@islogical);
    p.addParamValue('arrowHeadSize',0.3,@(a)isnumeric(a) && numel(a)==1);
    
    p.addParamValue('color','FFFFFFFF',@(a)ischar(a) && numel(a)==8);
    p.addParamValue('name','kml_quiver',@ischar);
    p.addParamValue('description','',@ischar);
    p.addParamValue('visibility',true,@islogical);
    p.addParamValue('model','',@ischar);
    p.addParamValue('altitudeMode','relativeToGround',@(a)ismember(a,{'clampToGround','relativeToGround','absolute'}));

    p.addParamValue('timeStamp','',@ischar);
    p.addParamValue('timeSpanBegin','',@ischar);
    p.addParamValue('timeSpanEnd','',@ischar);    
    
    p.parse(lat,long,u,v,varargin{:});
    
    arg = p.Results;

    if isempty(arg.model)
        arrowfile = 'arrow3d.dae';

        arg.model = arrowfile;
    end
    
    modelpath = which(arg.model);

    if ~isempty(modelpath)
        if isempty(dir(arg.model))
            copyfile(modelpath,arg.model);
        end
    else
        error('File %s not found!',arg.model);
    end
        
    f = this.createFolder(arg.name);

    uv = sqrt((u+v).^2);
    if strcmpi(this.unit,'deg')
        rad2deg = 180/pi;
    else
        rad2deg = 1;
    end
    
    heading = rad2deg * atan2(u,v);
    
    edgelen = @(a)(max(a(:))-min(a(:))).^2;
    dS = edgelen(latDEG) + edgelen(longDEG);
    
    scale = sqrt((u.^2 + v.^2)./dS);
    scale = arg.scale .* scale;
    
    for i = 1:numel(lat)
        if ~arg.plotArrows
            long2 = scale(i).*[0 u(i) ] + long(i);
            lat2  = scale(i).*[0 v(i)] + lat(i);
        else
            long2 = scale(i).*[0 u(i)] + long(i);
            lat2  = scale(i).*[0 v(i)] + lat(i);
        end
        f.plot(long2,lat2);
%         f.model(long(i),lat(i),alt(i),heading(i),tilt(i),roll(i), 'scale',scale(i),'model',arg.model, ...
%                                                                   'altitudeMode',arg.altitudeMode, ...
%                                                                   'visibility',arg.visibility, ...
%                                                                   'name',sprintf('Arrow %i',i), ...
%                                                                   'timeStamp', arg.timeStamp , ...
%                                                                   'timeSpanBegin', arg.timeSpanBegin , ...
%                                                                   'timeSpanEnd', arg.timeSpanEnd ...                                                                  
%                                                                   );
    end
end   